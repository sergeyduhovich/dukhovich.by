---
layout: single
title: "Debug"
ref: debug
date: 2019-05-24 12:00:00 +0300
categories: rxswift
lang: en
---

The subscription method has got a lot of parameters. You can pass not only `onNext` closure, but `onError`, `onCompleted` and `onDisposed` as well.

```swift
public func subscribe(onNext: ((E) -> Void)? = nil, onError: ((Swift.Error) -> Void)? = nil, onCompleted: (() -> Void)? = nil, onDisposed: (() -> Void)? = nil)
```

If you needed to add extra log entries in the following example:

```swift
observable
  .subscribe(onNext: { [weak self] value in
  	self?.doSomeStuff(value)
  })
  .disposed(by: disposeBag)
```

Probably you'd write something like that (at least I was writing similarly at the beginning of my Rx career):

```swift
observable
  .subscribe(onNext: { [weak self] value in
    self?.doSomeStuff(value)
    print(value)
  }, onError: { error in
    print(error)
  }, onCompleted: {
    print("onCompleted")
  }) {
    print("onDisposed")
  }
  .disposed(by: disposeBag)
```

Usually it's quite tough to transform the first example to the second one. Xcode usually doesn't want to help with its autocompletion. And after all checks have been done, you need to remove all these debug prints. If there are a lot of observables, to modify them might be painful and time-consuming.

Luckily, there is an operator for this purpose in RxSwift called `debug`. It will print out all events to standard output and you can add also a label to those events. So, if you set up a subscription in our file like the following:

```swift
Observable<Int>.interval(1, scheduler: MainScheduler.instance)
  .map { String($0) }
  .bind(to: strSubject)
  .disposed(by: disposeBag)

strSubject
  .debug("strSubject")
  .subscribe(onNext: { [weak self] value in
    self?.doSomeStuff(value)
  })
  .disposed(by: disposeBag)

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 7) { [weak self] in
    self?.strSubject.on(.error(DataError.testError))
}
```

You would see all events of the `strSubject`:

```swift
strSubject -> subscribed
strSubject -> Event next(0)
strSubject -> Event next(1)
strSubject -> Event next(2)
strSubject -> Event next(3)
strSubject -> Event next(4)
strSubject -> Event next(5)
strSubject -> Event next(6)
strSubject -> Event error(testError)
strSubject -> isDisposed
```

If you need something more specific or customized, you might use [community suggestion](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md#debugging), which is the following (I added extra prints for threads):

```swift
extension ObservableType {
  public func myDebug(identifier: String) -> Observable<Self.E> {
    return Observable.create { observer in
      print("subscribed \(identifier) \(Thread.current.description)")
      let subscription = self.subscribe { e in
        print("event \(identifier)  \(e) \(Thread.current.description)")
        switch e {
        case .next(let value):
          observer.on(.next(value))

        case .error(let error):
          observer.on(.error(error))

        case .completed:
          observer.on(.completed)
        }
      }
      return Disposables.create {
        print("disposing \(identifier) \(Thread.current.description)")
        subscription.dispose()
      }
    }
  }
}
```

In RxSwift a framework debug as any other operator is implemented by the pair of Producer + Sink, `Debug` and `DebugSink`, which could be found in `Debug.swift` file. I think it will be much easier to implement a custom debug as the extension above rather than writing a custom pair of Producer + Sink, but I'm quite ok with both solutions.

Let's checkout the updated version of the `strSubject` subscription:

```swift
strSubject
  .myDebug(identifier: "strSubject")
  .subscribeOn(ConcurrentDispatchQueueScheduler(qos: .background))
  .subscribe(onNext: { [weak self] value in
    self?.doSomeStuff(value)
  })
  .disposed(by: disposeBag)
```

As expected we can see extra info in the console:

```swift
subscribed strSubject <NSThread: 0x7ff0fbf06c10>{number = 3, name = (null)}
event strSubject  next(0) <NSThread: 0x7ff0fbd07d00>{number = 1, name = main}
event strSubject  next(1) <NSThread: 0x7ff0fbd07d00>{number = 1, name = main}
event strSubject  next(2) <NSThread: 0x7ff0fbd07d00>{number = 1, name = main}
event strSubject  next(3) <NSThread: 0x7ff0fbd07d00>{number = 1, name = main}
event strSubject  next(4) <NSThread: 0x7ff0fbd07d00>{number = 1, name = main}
event strSubject  next(5) <NSThread: 0x7ff0fbd07d00>{number = 1, name = main}
event strSubject  next(6) <NSThread: 0x7ff0fbd07d00>{number = 1, name = main}
event strSubject  error(testError) <NSThread: 0x7ff0fbd07d00>{number = 1, name = main}
disposing strSubject <NSThread: 0x7ff0fbd07d00>{number = 1, name = main}
```

## Resources

Another technique to ensure you are working correctly with memory is `Resources.total` variable. It is hidden under `TRACE_RESOURCES` flag. You have to add it to build settings. If you are using [cocoapods](https://www.raywenderlich.com/626-cocoapods-tutorial-for-swift-getting-started), all you need is adding the following lines in the pod file and re-run `pod install`:

```swift
post_install do |installer|
  installer.pods_project.targets.each do |target|
    if target.name == 'RxSwift'
      target.build_configurations.each do |config|
        if config.name == 'Debug'
          config.build_settings['OTHER_SWIFT_FLAGS'] ||= ['-D', 'TRACE_RESOURCES']
        end
      end
    end
  end
end
```

The comments under [378 issue](https://github.com/ReactiveX/RxSwift/issues/378) also might be helpful if you've got `Module 'RxSwift' has no member named 'resourceCount'` or something similar.

### Resources.total
 
At the top of the `Rx.swift` file you could find `Resources` structure.

```swift
#if TRACE_RESOURCES
    fileprivate let resourceCount = AtomicInt(0)

    /// Resource utilization information
    public struct Resources {
        /// Counts internal Rx resource allocations (Observables, Observers, Disposables, etc.). This provides a simple way to detect leaks during development.
        public static var total: Int32 {
            return load(resourceCount)
        }

        /// Increments `Resources.total` resource count.
        ///
        /// - returns: New resource count
        public static func incrementTotal() -> Int32 {
            return increment(resourceCount)
        }

        /// Decrements `Resources.total` resource count
        ///
        /// - returns: New resource count
        public static func decrementTotal() -> Int32 {
            return decrement(resourceCount)
        }
    }
#endif
```

How does this counter work? RxSwift library has got a lot of classes. Each time you allocate an instance from RxSwift library, you usually increase `Resources.total` and when the instance is deallocating, the counter is decreased. Let's checkout `BehaviorSubject.swift` file(shortened):

```swift
public final class BehaviorSubject<Element> {

    public init(value: Element) {
        self._element = value

        #if TRACE_RESOURCES
            _ = Resources.incrementTotal()
        #endif
    }
    
    #if TRACE_RESOURCES
        deinit {
        _ = Resources.decrementTotal()
        }
    #endif
}
```

There is a good instruction for debugging memory leaks from docs:

* navigate to your screen and use it;
* navigate back;
* observe initial resource count;
* navigate second time to your screen and use it;
* navigate back;
* observe final resource count;
* in case there is a difference in resource count between initial and final resource counts, there might be a memory leak somewhere.

The reason why 2 navigations are suggested is because of the first navigation forces loading of lazy resources.

In some cases there will be suitable printing of the total repeatedly (code could be used in `AppDelegate`):

```swift
_ = Observable<Int>.interval(1, scheduler: MainScheduler.instance)
  .subscribe(onNext: { _ in
    print("Resource count \(RxSwift.Resources.total)")
  })
```

Also there are 2 extra variables which could be used in some cases: `numberOfMapOperators` and `numberOfSerialDispatchQueueObservables`. 
