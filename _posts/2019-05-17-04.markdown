---
layout: single
title: "Traits"
ref: traits
date: 2019-05-17 12:00:00 +0300
categories: rxswift
lang: en
---

The Observable type in RxSwift is quite self-sufficient. But from time to time we have to think about specific cases and scenarios. Could the custom Observable button send `error`? Could a network-manager send a response or `next` twice? Do we need extra `observeOn` to forward elements to the particular thread?

You could find why and how on their [github doc page](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Traits.md). Here I'll try to explain why I find the traits useful.

## The problem

And we start with the following protocol example:

```swift
protocol HotelListViewModelType {
	var hotels: Observable<[Hotel]> { get }
	var searchInput: BehaviorRelay<String> { get }
}
```

Let's say we need a viewModel conformed to the protocol above. One possible implementation of it might be of the following class:

```swift
class HotelViewModel: HotelListViewModelType {

  let searchInput = BehaviorRelay<String>(value: "")

  var hotels: Observable<[Hotel]> {
      return searchInput
      .throttle(0.3, scheduler: MainScheduler.instance)
      .flatMapLatest { [weak self] query -> Observable<[Hotel]> in
        guard let self = self else { return .empty() }
        return self.searchHotels(query: query)
          .observeOn(MainScheduler.instance)
          .catchErrorJustReturn([])
      }
      .share(replay: 1)
  }

  func searchHotels(query: String) -> Observable<[Hotel]> {
    return Observable<Int>
      .timer(1, scheduler: ConcurrentDispatchQueueScheduler(qos: .background))
      .map { _ in
        return [
          Hotel(title: "Güden-Pearl Hotel", rating: 4.8),
          Hotel(title: "Minsk Penthouse", rating: 5),
          Hotel(title: "The Square Hotel", rating: 4.8),
          Hotel(title: "Appartamento Panoramico", rating: 5),
          Hotel(title: "Hotel Lungarno", rating: 4.8),
        ]
    }
  }
}
```

But looking only at the protocol declaration we can't say whether the events are delivered on the Main thread or not . And when working with UI layer we might decide to handle error and clarify the thread.

```swift
    let safeHotels = viewModel.hotels
      .observeOn(MainScheduler.instance)
      .catchErrorJustReturn([])
      .publish()

    safeHotels
      .bind(to: tableView.rx.items(cellIdentifier: "cell", cellType: UITableViewCell.self)) { index, model, cell in
        cell.textLabel?.text = model.title
      }
      .disposed(by: disposeBag)

    safeHotels
      .map { "we found \($0.count) hotels for you"}
      .bind(to: label.rx.text)
      .disposed(by: disposeBag)

    safeHotels
      .map { String(format: "%.2f", $0.map { $0.rating }.reduce(0, +) / Float($0.count)) + " avg." }
      .bind(to: label2.rx.text)
      .disposed(by: disposeBag)

    safeHotels
      .connect()
      .disposed(by: disposeBag)
```

There is nothing bad in this scenario. We've just done the same job twice. 

Also, there is another way to point out that Observable behaves in a bit more specific way than usual. I'm sure you know it very well, I'm talking about comments. Of course, we could add comments to the protocol, but comments don't guarantee that implementation will stick to them.

## The solution

Fortunately, there are specific types provided by RxSwift exactly for this purpose. **Traits** help communicate and ensure observable sequence properties across interface boundaries, as well as provide contextual meaning, syntactical sugar and target more specific use-cases when compared to a raw Observable, which could be used in any context. 

## SharedSequence + SharingStrategyProtocol: Driver / Signal

## Driver

Probably, the most famous trait is the Driver. It is a part of RxCocoa framework:

* can’t send error;
* observed on the Main scheduler;
* stateful, [shares computation resources](http://dukhovich.by/14-connectable-observable) and the last event, using share(replay: 1, scope: .whileConnected);
* suitable for the values like text, alpha, image and e.t.c.;

The formula for the Driver is simple and can be written as:

```swift
let driverSequence = rawObservable
  .observeOn(MainScheduler.instance)
  .catchErrorJustReturn(onErrorJustReturn)
  .share(replay: 1, scope: .whileConnected)
```

There are 3 methods to create a driver from the Observable type:

```swift
public func asDriver(onErrorJustReturn: E) -> Driver<E>
public func asDriver(onErrorDriveWith: Driver<E>) -> Driver<E>
public func asDriver(onErrorRecover: @escaping (_ error: Swift.Error) -> Driver<E>) -> Driver<E>
```

### onErrorJustReturn:

What is meant by "can’t send error" is that the Driver doesn't send `error` events, but when the underlying Observable does, the Driver stops working and sends a "recovery" value as the last `next` event and then immediately completes.

Let's take a look at the following example:

```swift
enum DataError: Error {
  case testError
}

let disposeBag = DisposeBag()
let strSubject = PublishSubject<String>()

let strDriver = strSubject
  .asDriver(onErrorJustReturn: "default string")
  .debug("driver")

strDriver
  .drive()
  .disposed(by: disposeBag)

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 1) { [weak self] in
    self?.strSubject.on(.next("first"))
}

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 2) { [weak self] in
    self?.strSubject.on(.next("second"))
}

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 3) { [weak self] in
    self?.strSubject.on(.error(DataError.testError))
}

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 4) { [weak self] in
    self?.strSubject.on(.next("third"))
}

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 5) { [weak self] in
    guard let self = self else { return }
    strDriver
      .drive()
      .disposed(by: self.disposeBag)
}
```

In the console:

```swift
//driver -> subscribed
//driver -> Event next(first)
//driver -> Event next(second)
//driver -> Event next(default string)
//driver -> Event completed
//driver -> isDisposed
//driver -> subscribed
//driver -> Event next(default string)
//driver -> Event completed
//driver -> isDisposed
```

In this example the underlying Observable sent two `next` events and then one `error` event. As I said, this `error` event was transformed to `next` event by the Driver and then subscription was terminated, cause we used `onErrorJustReturn` method.

Another interesting part in the example above is the second subscription. The subscription was made after the moment when the underlying Observable had emitted `error` event and had been completed. Let's checkout the Driver equivalent one more time:

```swift
let driverSequence = rawObservable
  .observeOn(MainScheduler.instance)
  .catchErrorJustReturn(onErrorJustReturn)
  .share(replay: 1, scope: .whileConnected)
```

When second time `strDriver` subscribed, the first subscription had completed, and bottom operator `share()` didn't have anything to share, and it trigered `subscribe` method on each part of the chain from the bottom to the top - `catchErrorJustReturn`->`observeOn`->`rawObservable`. But, because the first Observable had already failed, `catchErrorJustReturn` immediately returned one `next` with the default value and completed.

### onErrorDriveWith:

Instead of returning a single recovery value, our next method returns the whole recovery Driver. To achieve that we need not one, but two Drivers. 

```swift
enum DataError: Error {
  case testError
}

let disposeBag = DisposeBag()
let strSubject = PublishSubject<String>()
let anotherStrRelay = BehaviorRelay<String>(value: "")
lazy var anotherDriver = anotherStrRelay.asDriver()

Observable<Int>.interval(1, scheduler: MainScheduler.instance)
  .do(onNext: { [weak self] item in
    self?.anotherStrRelay.accept(String(item))
  })
  .subscribe()
  .disposed(by: disposeBag)

let strDriver = strSubject
  .asDriver(onErrorDriveWith: anotherDriver)
  .debug("driver")

strDriver
  .drive()
  .disposed(by: disposeBag)

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 1) { [weak self] in
    self?.strSubject.on(.next("first"))
}

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 2) { [weak self] in
    self?.strSubject.on(.next("second"))
}

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 3) { [weak self] in
    self?.strSubject.on(.error(DataError.testError))
}

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 4) { [weak self] in
    self?.strSubject.on(.next("third"))
}

DispatchQueue.main
  .asyncAfter(deadline: DispatchTime.now() + 5) { [weak self] in
    guard let self = self else { return }
    strDriver
      .debug("second subscription")
      .drive()
      .disposed(by: self.disposeBag)
}
```

Switching drivers process is quite smooth, all we could find in the console is only the following events:

```swift
//driver -> subscribed
//driver -> Event next(first)
//driver -> Event next(second)
//driver -> Event next(2)
//driver -> Event next(3)
//driver -> Event next(4)
//second subscription -> subscribed
//second subscription -> Event next(4)
//driver -> Event next(5)
//second subscription -> Event next(5)
//driver -> Event next(6)
//second subscription -> Event next(6)
//driver -> Event next(7)
//second subscription -> Event next(7)
```

Everything works great, but there is a slight issue - we need more initial variables, and there is no guarantee that the second Driver will not terminate before we need it.

### onErrorRecover:

This method works similarly as the previous. Alternatively, you could use the closure to create some sort of recursion, but I don't recommend using it this way. In future posts I'll show how `Catch` Producer and `CatchSequenceSink` work.

```swift
strSubject
  .asDriver { [weak self] error -> Driver<String> in
    guard let self = self else { return Driver.empty() }
    return self.anotherDriver
  }
  .drive()
  .disposed(by: disposeBag)
```

## Signal

Signal is the counterpart for the Driver from RxCocoa framework. 

* can’t send error;
* observed on the Main scheduler;
* stateless, [shares computation resources](http://dukhovich.by/14-connectable-observable) but not the last event, using share(replay: 0, scope: .whileConnected);
* suitable for “future” events like button clicks, value changes;

The only difference between the Driver and Signal is that Signal doesn't share the last value to new subscribers. It is very similar to the comparison between ReplaySubject and PublishSubject. The other abilities of Signal and the Driver are the same.

Observable could be transformed to Signal using:

```swift
public func asSignal(onErrorJustReturn: E) -> Signal<E>
public func asSignal(onErrorSignalWith: Signal<E>) -> Signal<E>
public func asSignal(onErrorRecover: @escaping (_ error: Swift.Error) -> Signal<E>) -> Signal<E>
```

I find the Driver and Signal useful in MVVM-like architectures. They explicitly tell us how they work. For stateful observable properties, like titles or images, it is worth using Drivers, for stateless observable properties, like clicks or user interactions, it is nice to have Signals in protocol declaration. 

## PrimitiveSequence: Single / Completable / Maybe

## Single

* emits exactly 1 element or an error;
* stateless, doesn’t share anything;
* can be created from scratch similarly to Observable;
* holds raw Observable under the hood;
* perfectly suits network requests with the result (GET, POST);
* convenient `asObservable()` / `asSingle()` methods;

Single is a powerful and explicit trait from core RxSwift framework. Let's take a look at the convenient methods `asObservable()` / `asSingle()`. Even any Observable might be transformed to Single, there might be an issue in some cases. What `asSingle()` expects from Observable source? 

Let's simulate 4 scenarios:

* Observable emits one next event then completes;
* Observable emits two next events then completes;
* Observable emits zero next events then completes;
* Observable emits just one next event, no error or completed;

### 1

Observable emits one next event then completes:

```swift
  var strSubject = PublishSubject<String>()
  let disposeBag = DisposeBag()
  
  strSubject
  .asSingle()
  .debug("asSingle()")
  .subscribe()
  .disposed(by: disposeBag)

  strSubject.on(.next("element"))
  strSubject.on(.completed)
```

In this case `asSingle()` converts Observable to Single like a charm:

```swift
asSingle() -> subscribed
asSingle() -> Event next(element)
asSingle() -> Event completed
asSingle() -> isDisposed
```

### 2

Observable emits two next events then completes:

```swift
  var strSubject = PublishSubject<String>()
  let disposeBag = DisposeBag()
  
  strSubject
  .asSingle()
  .debug("asSingle()")
  .subscribe()
  .disposed(by: disposeBag)

  strSubject.on(.next("element1"))
  strSubject.on(.next("element2"))
  strSubject.on(.completed)
```

We've got an error:

```swift
asSingle() -> subscribed
asSingle() -> Event error(Sequence contains more than one element.)
asSingle() -> isDisposed
```

### 3

Observable emits zero next events then completes:

```swift
  var strSubject = PublishSubject<String>()
  let disposeBag = DisposeBag()
  
  strSubject
  .asSingle()
  .debug("asSingle()")
  .subscribe()
  .disposed(by: disposeBag)

  strSubject.on(.completed)
```

We've got an error:

```swift
asSingle() -> subscribed
asSingle() -> Event error(Sequence doesn't contain any elements.)
asSingle() -> isDisposed
```

### 4

Observable emits just one next event, no error or completed:

```swift
  var strSubject = PublishSubject<String>()
  let disposeBag = DisposeBag()
  
  strSubject
  .asSingle()
  .debug("asSingle()")
  .subscribe()
  .disposed(by: disposeBag)

  strSubject.on(.next("element1"))
```

We've got only a subscription message:

```swift
asSingle() -> subscribed
```

It is not an error, we wait until Observable completes, even if we already have 1 next event. In some cases, especially when working with `flatMap` you might expect one behavior but because of this scenario you've got another.

A usual workaround to have expected behavior using `asSingle()` is putting `take(1)` after the Observable you want to transform to Single.

Let's take a look at modified example #2

```swift
  var strSubject = PublishSubject<String>()
  let disposeBag = DisposeBag()
  
  strSubject
  .take(1)
  .asSingle()
  .debug("asSingle()")
  .subscribe()
  .disposed(by: disposeBag)

  strSubject.on(.next("element1"))
  strSubject.on(.next("element2"))
  strSubject.on(.completed)
```

And in this way Observable converts to Single as expected, although initially it failed to convert.

```swift
asSingle() -> subscribed
asSingle() -> Event next(element1)
asSingle() -> Event completed
asSingle() -> isDisposed
```

## Completable

* emits completion or error;
* stateless, doesn’t share anything;
* can be created from scratch similarly to Observable;
* holds raw Observable under the hood;
* perfectly suits network requests without the result (PUT, DELETE);
* alternative for Observable<Void>;
* convenient asObservable() method;
* `asCompletable()` transformation available only for PrimitiveSequence;

There is not too much to discuss, Completable itself is quite easy, although the simplest form could be written as:

```swift
Completable.empty()
  .debug("completable")
  .subscribe()
  .disposed(by: disposeBag)
```

```swift
completable -> subscribed
completable -> Event completed
completable -> isDisposed
```

A more interesting part worth mentioning is the Completable as a part of the chain, especially as a part of the `flatMap` operator. Let's check out both cases, Completable is "inside" `flatMap` or "outside" it:

### 1

```swift
strSubject
  .debug("strSubject")
  .flatMap { input -> Completable in
    return Completable.empty().debug("completable")
  }
  .debug("flatMap")
  .subscribe()
  .disposed(by: disposeBag)

strSubject.on(.next("first"))
strSubject.on(.next("second"))
strSubject.on(.next("third"))
```

At first glance it might look like for each `next` event of `strSubject` we will see one `next` for `flatMap`. But it is not true. The thing here is that `flatMap` requires `next` events to be chained, `completed` events in inner closure don't affect the result, they don't trigger anything, neither completed, nor error, nor next. 

```swift
flatMap -> subscribed
strSubject -> subscribed
strSubject -> Event next(first)
completable -> subscribed
completable -> Event completed
completable -> isDisposed
strSubject -> Event next(second)
completable -> subscribed
completable -> Event completed
completable -> isDisposed
strSubject -> Event next(third)
completable -> subscribed
completable -> Event completed
completable -> isDisposed
```

As you can see, there is only 1 entry `flatMap -> subscribed` result and  Observable doesn't emit events.

### 2

Let's modify our example and transform Completable to `Observable<Void>` applying `.andThen(.just(()))`:

```swift
strSubject
  .debug("strSubject")
  .flatMap { input -> Observable<Void> in
    return Completable.empty()
      .andThen(.just(()))
      .debug("Observable Void")
  }
  .debug("flatMap")
  .subscribe()
  .disposed(by: disposeBag)

strSubject.on(.next("first"))
strSubject.on(.next("second"))
strSubject.on(.next("third"))
```

After this modifications we can see `flatMap` entries in the console:

```swift
flatMap -> subscribed
strSubject -> subscribed
strSubject -> Event next(first)
Observable Void -> subscribed
Observable Void -> Event next(())
flatMap -> Event next(())
Observable Void -> Event completed
Observable Void -> isDisposed
strSubject -> Event next(second)
Observable Void -> subscribed
Observable Void -> Event next(())
flatMap -> Event next(())
Observable Void -> Event completed
Observable Void -> isDisposed
strSubject -> Event next(third)
Observable Void -> subscribed
Observable Void -> Event next(())
flatMap -> Event next(())
Observable Void -> Event completed
Observable Void -> isDisposed
```

## Maybe

* emits completed, single next event or error;
* stateless, doesn’t share anything;
* can be created from scratch similarly to Observable;
* holds raw Observable under the hood;
* convenient `asObservable()` `asMaybe()` methods;

Have you ever worked with `Observable<Optional(SomeType)>`? In terms of PrimitiveSequence you could think about `Maybe<Int>` as `Single<Int?>` which has extra completed when `nil` is emitted. Sometimes it is better to have `.completed` instead of `.success(nil)`.

## Control Property / Control Event

* they are Observer and Observable at the same time;
* very similar to Driver/Signal, but they are bound to element's lifecycle;
* they are unique members of RxCocoa framework;
* they deliver events on MainScheduler;
* they emit events only for user input or initial value;

ControlEvent is stateless, ControlProperty shares the last element for a new subscriber. Let's take a look at UISwitch behavior, I subscribed to `rx.isOn` `ControlProperty<Bool>`:

```swift
switcher.rx.isOn
  .subscribe(onNext: { value in
    print(value)
  })
  .disposed(by: disposeBag)

switcher.isOn = false
```

The event I set is from `isOn` to `false` and it was updated on the screen, ControlProperty doesn't emit `.next(false)` because it was a programmatic change. I find this feature very useful for two-directional bindings between some Subject and UI-element.
